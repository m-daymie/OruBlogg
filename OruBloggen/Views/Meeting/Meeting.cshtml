@model OruBloggen.Models.MeetingViewModel
@using OruBloggen.Models;

@{
    ViewBag.Title = "Meeting";
}

<h2>Möteshanterare</h2>


@using (Html.BeginForm("CreateMeeting", "Meeting", FormMethod.Post))
{
    @Html.AntiForgeryToken()
    <div class="calendar" style="width:50%; float:right;">

        <div id="calender"></div>

        <div id="myModal" class="modal fade" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title"><span id="eventTitle"></span></h4>
                    </div>
                    <div class="modal-body">
                        <p id="pDetails"></p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>

        <link href="//cdnjs.cloudflare.com/ajax/libs/fullcalendar/3.4.0/fullcalendar.min.css" rel="stylesheet" />
        <link href="//cdnjs.cloudflare.com/ajax/libs/fullcalendar/3.4.0/fullcalendar.print.css" rel="stylesheet" media="print" />

    </div>
    <div class="form-horizontal createMeeting" style="width:50%; float:left;">
        <h4>Skapa ett möte</h4>
        
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Meeting.MeetingTitle, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Meeting.MeetingTitle, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
                @Html.ValidationMessageFor(model => model.Meeting.MeetingTitle, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Meeting.MeetingDesc, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Meeting.MeetingDesc, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Meeting.MeetingDesc, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">

            @Html.LabelFor(model => model.Meeting.MeetingStartDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Meeting.MeetingStartDate, new { htmlAttributes = new {
                @class = "form-control", id = "datetimepicker1", type = "YYYY-MM-DD HH:mm", placeholder = "yyyy-mm-dd 00:00" } })
                @Html.ValidationMessageFor(model => model.Meeting.MeetingStartDate, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.Meeting.MeetingEndDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Meeting.MeetingEndDate, new { htmlAttributes = new {
                @class = "form-control", id = "datetimepicker2", type = "YYYY-MM-DD HH:mm", placeholder = "yyyy-mm-dd 00:00" } })
                @Html.ValidationMessageFor(model => model.Meeting.MeetingEndDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class=" form-group">
            @Html.Label("Sök", htmlAttributes: new { @class = "control-label col-md-2"})
            <div class="col-md-10">
                <input class="form-control" type="text" id="searchString" autocomplete="off" />

            </div>
        </div>

        <div class="form-group">
            @Html.Label("Användare", htmlAttributes: new { @class = "col-md-2 control-label" })
            <div class="col-md-10">
                @Html.ListBoxFor(model => model.UserIds, Model.Users, new { @class = "form-control", id = "usersLb" })
                <input class="btn" type="button" name="+" id="add" value="+"
                       style="float:left; width:30px; height:30px; margin:10px 0px 5px; padding:0px;" />
                <p style="float:left; margin:18px 5px 5px 5px">Lägg till användare</p>
            </div>
        </div>
        <div class="form-group">
            @Html.Label("Valda användare", htmlAttributes: new { @class = "col-md-2 control-label", style = "margin-top:40px; text-align:left;" })
            <div class="col-md-10">
                <input class="btn" type="button" name="-" id="remove" value="-"
                       style="float:left; width:30px; height:30px; margin:0px 0px 5px; padding:0px;" />
                <p style="float:left; margin:6px 5px 5px 5px">Ta bort användare</p>
                &nbsp;
                @Html.ListBoxFor(model => model.SelectedUserIds, Model.SelectedUsers,
                                 new { @class = "form-control", id = "selectedUsersLb", style="margin:25px 0px 5px;" })

                <input type="submit" value="Skapa" id="submit" style="margin-left:auto;" class="btn btn-default" />
            </div>
        </div>
    </div>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap.min.css">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datetimepicker/4.7.14/css/bootstrap-datetimepicker.min.css" rel="stylesheet" />
}

@section Scripts {
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.0/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.9.0/moment.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datetimepicker/4.7.14/js/bootstrap-datetimepicker.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>

    <script>
        $(function () {
            $(document)

                .on("click", "#add", function () {
                    $("#usersLb :selected").remove().appendTo("#selectedUsersLb");
                    $("#searchString").val("");
                    populateListBox();
                })
                .on("click", "#remove", function () {
                    $("#selectedUsersLb :selected").remove().appendTo("#usersLb");
                })
                .on("input", "#searchString", function () {
                    populateListBox();
                })
                .on("click", "#submit", function () {
                    $("#selectedUsersLb option").prop("selected", "selected");
                });

            $('#datetimepicker1').datetimepicker({ format: "YYYY-MM-DD HH:mm" });
            $('#datetimepicker2').datetimepicker({ format: "YYYY-MM-DD HH:mm" });

            function populateListBox() {
                $.ajax({
                    url: '/Meeting/ListSearchedUsers',
                    type: "get",
                    dataType: "json",
                    data: { searchString: $("#searchString").val() },
                    success: function (data) {

                        $("#usersLb").empty();
                        $("#usersLb").addItems(data);
                    }
                });
            }
            $.fn.addItems = function (data) {
                return this.each(function () {
                    var list = this;
                    $.each(data, function (index, itemData) {
                        var option = new Option(itemData.Text, itemData.Value);

                        list.add(option);
                        var userlist = list;

                        $('#usersLb').appendTo(userlist);

                        var cacheEle = $('#selectedUsersLb');
                        $('#usersLb option').filter(function (index, element) {
                            return cacheEle.find('option[value="' + element.value + '"]').length == 1;
                        }).remove();
                    });
                });
            };
        });
    </script>


    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.18.1/moment.min.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/fullcalendar/3.4.0/fullcalendar.min.js"></script>

    <script>
        $(document).ready(function () {

            var events = [];
            $.ajax({
                type: "GET",
                url: "/MeetingCalendar/GetEvents",
                dataType: 'json',
                success: function (data) {
                    $.each(data, function (i, v) {
                        events.push({
                            title: v.MeetingTitle,
                            description: v.MeetingDesc,
                            start: moment(v.MeetingStartDate),
                            end: v.MeetingEndDate != null ? moment(v.MeetingEndDate) : null,
                            meetingID: v.MeetingID,
                            meetingCreator: v.MeetingCreator,
                            meetingActive: v.MeetingActive,
                            teamName: v.TeamName
                        });
                    })
                    GenerateCalender(events);
                },
                error: function (error) {
                    alert('failed to load calender');
                }
            })

            function GenerateCalender(events) {

                $('#calender').fullCalendar('destroy');
                $('#calender').fullCalendar({
                    contentHeight: 400,
                    defaultDate: new Date(),
                    timeFormat: 'HH:mm',
                    header: {
                        left: 'prev,next today',
                        center: 'title',
                        right: 'month,basicWeek,basicDay,agenda'
                    },


                    //eventRender: function (event, element) {
                    //if (event.meetingActive) {
                    //element.css('background-color', '#008000');

                    //}
                    //else {
                    //element.css('background-color', '#808080');
                    //element.css('border-color', '#808080');
                    //element.css('opacity', '0.7');

                    //}
                    //},

                    eventRender: function (event, element) {
                        if (event.meetingActive == false) {
                            element.css('background-color', '#808080');
                            element.css('border-color', '#808080');
                            element.css('opacity', '0.7');

                        }
                        else if (event.teamName == "Informatik") {
                            element.css('background-color', '#4169E1');
                            element.css('border-color', '#4169E1');

                        }
                        else if (event.teamName == "Ekonomi") {
                            element.css('background-color', '#228B22');
                            element.css('border-color', '#228B22');
                        }

                        else if (event.teamName == "Statistik") {
                            element.css('background-color', '#A52A2A');
                            element.css('border-color', '#A52A2A');
                        }

                        else if (event.teamName == "Juridik") {
                            element.css('background-color', '#BA55D3');
                            element.css('border-color', '#BA55D3');
                        }
                    },

                    events: events,
                    eventClick: function (calEvent, jsEvent, view) {

                        var currentMeetingID = calEvent.meetingID
                        $.ajax({
                            url: '/MeetingCalendar/ListMembers',
                            type: "GET",
                            dataType: "json",
                            data: { meetingID: currentMeetingID },
                            success: function (data) {
                                memberlist = data;
                            }
                        })

                        $('#myModal #eventTitle').text(calEvent.title);
                        var $description = $('<div />');
                        $description.append($('<p />').html('<b>Tid: </b>' + calEvent.start.format("HH:mm") + " - " + calEvent.end.format("HH:mm")));
                        $description.append($('<p />').html('<b>Beskrivning: </b>' + calEvent.description));
                        $description.append($('<p />').html('<b>Skapare: </b>' + calEvent.meetingCreator));
                        $description.append($('<p />').html('<b>Deltagare: </b>' + memberlist));


                        $('#myModal #pDetails').empty().html($description);

                        $('#myModal').modal();
                        $(document)
                            .on("click", "#meetingAccess", function () {
                                var meetingID = calEvent.meetingID;
                                location.href = '/Meeting/MeetingDetails/' + meetingID;
                            });

                    }
                })
            }
        })
    </script>

    @Scripts.Render("~/bundles/jqueryval")
}