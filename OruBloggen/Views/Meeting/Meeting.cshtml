@model OruBloggen.Models.MeetingViewModel
@using OruBloggen.Models;

@{
    ViewBag.Title = "Meeting";
}

<h2>Möteshanterare</h2>


@using (Html.BeginForm("CreateMeeting", "Meeting", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Skapa ett möte</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Meeting.MeetingTitle, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Meeting.MeetingTitle, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
                @Html.ValidationMessageFor(model => model.Meeting.MeetingTitle, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Meeting.MeetingDesc, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Meeting.MeetingDesc, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Meeting.MeetingDesc, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Meeting.MeetingStartDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Meeting.MeetingStartDate, "{0:yyyy-MM-ddThh:mm:ss}", new { htmlAttributes = new { @class = "form-control", type = "datetime-local" } })
                @Html.ValidationMessageFor(model => model.Meeting.MeetingStartDate, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.Meeting.MeetingEndDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Meeting.MeetingEndDate, "{0:yyyy-MM-ddThh:mm:ss}", new { htmlAttributes = new { @class = "form-control", type = "datetime-local" } })
                @Html.ValidationMessageFor(model => model.Meeting.MeetingEndDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class=" form-group">
            @Html.Label("Sök användare", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input class="form-control" type="text" id="searchString" autocomplete="off" />

            </div>
        </div>



        <div class="form-group">
            @Html.Label("Användare", htmlAttributes: new { @class = "col-md-2 control-label" })
            @*@Html.LabelFor(model => model.Users, new { @class = "col-md-2 control-label" })*@
            <div class="col-md-10">
                @Html.ListBoxFor(model => model.UserIds, Model.Users, new { @class = "form-control", id = "usersLb" })
                <input class="btn btn-default" type="button" name="+" id="add" value="+" />
                <input class="btn btn-default" type="button" name="-" id="remove" value="-" />
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Valda användare", htmlAttributes: new { @class = "col-md-2 control-label" })
            @*@Html.LabelFor(model => model.SelectedUsers, new { @class = "col-md-2 control-label" })*@
            <div class="col-md-10">
                @Html.ListBoxFor(model => model.SelectedUserIds, Model.SelectedUsers, new { @class = "form-control", id = "selectedUsersLb" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                
                <input id="createMeeting" type="submit" value="Skapa" class="btn btn-default"/>
            </div>
        </div>
    </div>
}

@section Scripts {
    <script>
        function disableButton()
        {
            var listBox = $("#selectedUsersLb").val().length;
            if (listBox < 1) {
                $("#createMeeting").prop("disabled", true);
            } else {
                $("#createMeeting").prop("disabled", false);
            }
        }
        $(function () {
            $(document)
                .on("click", "#add", function () {
                    $("#usersLb :selected").remove().appendTo("#selectedUsersLb");
                    $("#searchString").val("");
                    populateListBox();
                    disableButton();
                })
                .on("click", "#remove", function () {
                    $("#selectedUsersLb :selected").remove().appendTo("#usersLb");
                    disableButton();
                })

                .on("input", "#searchString", function () {

                    populateListBox();

                });
            disableButton();

            function populateListBox() {
                $.ajax({
                    url: '/Meeting/ListSearchedUsers',
                    type: "get",
                    dataType: "json",
                    data: { searchString: $("#searchString").val() },
                    success: function (data) {

                        $("#usersLb").empty();
                        $("#usersLb").addItems(data);

                    }
                });
            }
            $.fn.addItems = function (data) {
                return this.each(function () {
                    var list = this;
                    $.each(data, function (index, itemData) {
                        var option = new Option(itemData.Text, itemData.Value);
                        list.add(option);
                        var userlist = list;
                        $('#usersLb').appendTo(userlist);
                    });
                });

            };

        });

    </script>


    @Scripts.Render("~/bundles/jqueryval")
}